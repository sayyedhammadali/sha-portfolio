{"version":3,"sources":["components/typing/Typing.js","components/landing/Landing.js","App.js","components/about/About.js","components/portfolio/Portfolio.js","components/footer/Footer.js","serviceWorker.js","index.js"],"names":["Typing","props","words","content","forEach","word","index","push","react_default","a","createElement","dist_default","Delay","ms","key","Backspace","count","length","id","className","speed","loop","Landing","typing_Typing","Component","App","components_landing_Landing","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAyBeA,EAtBA,SAACC,GAAU,IACjBC,EAASD,EAATC,MACHC,EAAU,GAWd,OATAD,EAAME,QAAQ,SAAUC,EAAMC,GACf,IAAVA,GACDH,EAAQI,KAAKC,EAAAC,EAAAC,cAACC,EAAAF,EAAgBG,MAAjB,CAAuBC,GAAI,IAAKC,IAAKR,KAEpDH,EAAQI,KAAKF,GACbF,EAAQI,KAAKC,EAAAC,EAAAC,cAACC,EAAAF,EAAgBG,MAAjB,CAAuBC,GAAI,IAAMC,IAAKR,EAAM,KACzDH,EAAQI,KAAKC,EAAAC,EAAAC,cAACC,EAAAF,EAAgBM,UAAjB,CAA2BC,MAAOX,EAAKY,OAAQH,IAAKR,EAAM,OAIvEE,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,SAASC,UAAU,QACzBX,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAiBW,MAAO,GAAIC,MAAM,GAC/BlB,KCwBMmB,mLAlCX,OACEd,EAAAC,EAAAC,cAAA,OAAKS,UAAU,kBAAkBD,GAAG,WAClCV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,gCACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,2BAEbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,sBACbX,EAAAC,EAAAC,cAACa,EAAD,CAAQrB,MATL,CAAC,4BAA6B,qBAAuB,oDAY1DM,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iCAAf,wBAIAX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,UACbX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,gBAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,iBAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,cAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,eAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,gBAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,gBAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,mBAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,cAAb,OACAX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,mCA3BPK,aCgBPC,SClBKD,kBCAIA,kBCAHA,6LHOjB,OACEhB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAACgB,EAAD,cAJUF,cIIEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3fa5a5f.chunk.js","sourcesContent":["import React from 'react';\nimport TypingAnimation from 'react-typing-animation';\n\nconst Typing = (props) => {\n  const {words} = props;\n  let content = [];\n\n  words.forEach(function (word, index) {\n    if(index === 0) {\n      content.push(<TypingAnimation.Delay ms={500} key={index}/>);\n    }\n    content.push(word);\n    content.push(<TypingAnimation.Delay ms={3000} key={index+1}/>);\n    content.push(<TypingAnimation.Backspace count={word.length} key={index+1}/>);\n  })\n\n  return (\n    <div id=\"typing\" className=\"mt-4\">\n      <TypingAnimation speed={30} loop={true}>\n        {content}\n      </TypingAnimation>\n    </div>\n  );\n};\n\nexport default Typing;","import React, {Component} from 'react';\nimport './Landing.scss';\n\nimport Typing from '../typing/Typing';\n\nclass Landing extends Component {\n  render() {\n    const typing = ['Looking for a Web Expert?', 'Hello, I\\'m Hammad!', 'I can help you to find sustainable solutions.'];\n\n    return (\n      <div className=\"container-fluid\" id=\"landing\">\n        <div className=\"row h-100 align-items-center\">\n          <div className=\"col-sm-12\">\n            <div className=\"intro-block text-center\">\n\n              <div className=\"headline display-4\">\n                <Typing words={typing}/>\n              </div>\n\n              <div className=\"position mb-5 text-capitalize\">\n                full stack developer\n              </div>\n\n              <div className=\"skills\">\n                <i className=\"fab fa-html5\"> | </i>\n                <i className=\"fab fa-drupal\"> | </i>\n                <i className=\"fab fa-npm\"> | </i>\n                <i className=\"fab fa-node\"> | </i>\n                <i className=\"fab fa-react\"> | </i>\n                <i className=\"fab fa-linux\"> | </i>\n                <i className=\"fab fa-css3-alt\"> | </i>\n                <i className=\"fab fa-php\"> | </i>\n                <i className=\"fas fa-code-branch\"></i>\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Landing;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Landing from './components/landing/Landing';\nimport About from \"./components/about/About\";\nimport Portfolio from \"./components/portfolio/Portfolio\";\nimport Footer from \"./components/footer/Footer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Landing/>\n        {/*<About/>\n        <Portfolio/>\n        <Footer/>*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react';\nimport './About.scss';\n\nclass About extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\" id=\"about\">\n        <h1>About</h1>\n      </div>\n    );\n  }\n}\n\nexport default About;\n\n","import React, {Component} from 'react';\nimport './Portfolio.scss';\n\nclass Portfolio extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\" id=\"portfolio\">\n        <h1>Portfolio</h1>\n      </div>\n    );\n  }\n}\n\nexport default Portfolio;\n\n","import React, {Component} from 'react';\nimport './Footer.scss';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\" id=\"footer\">\n        <h1>Footer</h1>\n      </div>\n    );\n  }\n}\n\nexport default Footer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}